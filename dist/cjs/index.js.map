{"version":3,"file":"index.js","sources":["../../../src/components/ThemeSelector/ThemeSelector.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { Tema } from '../../types/Tema';\n\nexport interface ThemeOption {\n  title: string;\n  colors: {\n    primary: string;\n    secondary: string;\n    tertiary: string;\n    quaternary: string;\n    [key: string]: string;\n  };\n}\n\nexport interface ThemeSelectorProps {\n  themes: Tema[];\n  currentTheme?: number;\n  onThemeChange: (id: number) => void;\n}\n\nconst ThemeSelector: React.FC<ThemeSelectorProps> = ({\n  themes,\n  currentTheme,\n  onThemeChange,\n}) => {\n  return (\n    <ThemeGrid>\n      {themes.map((theme) => (\n        <ThemeItem \n          key={theme.title}\n          isSelected={theme.id === currentTheme}\n          onClick={() => onThemeChange(theme.id)}\n          borderColor={theme.quaternaryColor}\n        >\n          <ThemeName>{theme.title}</ThemeName>\n          <ColorPalette>\n            <ColorBlock color={theme.primaryColor} />\n            <ColorBlock color={theme.secondaryColor} />\n            <ColorBlock color={theme.tertiaryColor} />\n            <ColorBlock color={theme.quaternaryColor} />\n          </ColorPalette>\n        </ThemeItem>\n      ))}\n    </ThemeGrid>\n  );\n};\n\nconst ThemeGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));\n  gap: 15px;\n  width: 100%;\n`;\n\ninterface ThemeItemProps {\n  isSelected: boolean;\n  borderColor: string;\n}\n\nconst ThemeItem = styled.div<ThemeItemProps>`\n  background-color: ${props => props.theme.colors.primary};\n  border-radius: 5px;\n  overflow: hidden;\n  cursor: pointer;\n  transition: transform 0.2s ease;\n  border: 2px solid ${props => props.isSelected ? props.borderColor : 'transparent'};\n\n  &:hover {\n    transform: translateY(-3px);\n  }\n`;\n\nconst ThemeName = styled.div`\n  padding: 10px;\n  text-align: center;\n  font-weight: 600;\n  color: ${props => props.theme.colors.white};\n`;\n\ninterface ColorBlockProps {\n  color: string;\n}\n\nconst ColorPalette = styled.div`\n  display: flex;\n  height: 30px;\n`;\n\nconst ColorBlock = styled.div<ColorBlockProps>`\n  flex: 1;\n  height: 100%;\n  background-color: ${props => props.color};\n`;\n\nexport default ThemeSelector;"],"names":["_jsx","_jsxs"],"mappings":";;;;;AAqBA,MAAM,aAAa,GAAiC,CAAC,EACnD,MAAM,EACN,YAAY,EACZ,aAAa,GACd,KAAI;IACH,QACEA,eAAC,SAAS,EAAA,EAAA,QAAA,EACP,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,MAChBC,gBAAC,SAAS,EAAA,EAER,UAAU,EAAE,KAAK,CAAC,EAAE,KAAK,YAAY,EACrC,OAAO,EAAE,MAAM,aAAa,CAAC,KAAK,CAAC,EAAE,CAAC,EACtC,WAAW,EAAE,KAAK,CAAC,eAAe,EAAA,QAAA,EAAA,CAElCD,cAAA,CAAC,SAAS,EAAA,EAAA,QAAA,EAAE,KAAK,CAAC,KAAK,EAAA,CAAa,EACpCC,gBAAC,YAAY,EAAA,EAAA,QAAA,EAAA,CACXD,eAAC,UAAU,EAAA,EAAC,KAAK,EAAE,KAAK,CAAC,YAAY,EAAA,CAAI,EACzCA,eAAC,UAAU,EAAA,EAAC,KAAK,EAAE,KAAK,CAAC,cAAc,EAAA,CAAI,EAC3CA,cAAA,CAAC,UAAU,EAAA,EAAC,KAAK,EAAE,KAAK,CAAC,aAAa,EAAA,CAAI,EAC1CA,eAAC,UAAU,EAAA,EAAC,KAAK,EAAE,KAAK,CAAC,eAAe,EAAA,CAAI,CAAA,EAAA,CAC/B,CAAA,EAAA,EAXV,KAAK,CAAC,KAAK,CAYN,CACb,CAAC,EAAA,CACQ;AAEhB;AAEA,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAA;;;;;CAK3B;AAOD,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAgB;sBACtB,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAA;;;;;AAKnC,oBAAA,EAAA,KAAK,IAAI,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC,WAAW,GAAG,aAAa,CAAA;;;;;CAKlF;AAED,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAA;;;;WAIjB,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAA;CAC3C;AAMD,MAAM,YAAY,GAAG,MAAM,CAAC,GAAG,CAAA;;;CAG9B;AAED,MAAM,UAAU,GAAG,MAAM,CAAC,GAAG,CAAiB;;;AAGxB,oBAAA,EAAA,KAAK,IAAI,KAAK,CAAC,KAAK,CAAA;CACzC;;;;"}